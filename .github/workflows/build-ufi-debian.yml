name: Build UFI debian

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_git_repo:
        description: "repo"
        required: true
        default: "msm8916-mainline/linux"
      set_git_branch:
        description: "branch"
        required: true
        default: "old/msm8916/5.15"
      set_ufi_patch_version:
        description: "ufi_patch_version"
        required: true
        default: "ufi"  
  #schedule:
    #- cron: "0 17 * * 0"

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y binfmt-support qemu-user-static gcc-10-aarch64-linux-gnu kernel-package fakeroot simg2img img2simg mkbootimg bison flex gcc-aarch64-linux-gnu pkg-config libncurses-dev libssl-dev unzip git devscripts
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "COMPILE_STARTINGTIME=$(date +"%m.%d.%H%M")" >> $GITHUB_ENV

          set_git_url="https://github.com/${{ github.event.inputs.set_git_repo }}.git"
          set_git_repo="${{ github.event.inputs.set_git_repo }}"
          if  [[ -z "${set_git_repo}" && "linux" == "${set_git_repo}" ]]; then
              set_git_url="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
          fi
          echo "LINUX_GITURL=${set_git_url}" >> $GITHUB_ENV

      - name: Download source code
        id: down
        run: |
          git clone --depth 1 -b ${{ github.event.inputs.set_git_branch }} ${{ env.LINUX_GITURL }} linux

      - name: Patch ufi
        id: patch
        run: |
          cd linux/
          ## git apply 
          ## git apply 
          for patch in `find ../patch/${{ github.event.inputs.set_ufi_patch_version }}/*.patch | LC_ALL=C sort -u`
          do
              # detect and remove files which patch will create
              lsdiff -s --strip=1 "${patch}" | grep '^+' | awk '{print $2}' | xargs -I % sh -c 'rm -f %'
              echo "Processing file $patch"
              patch --batch --silent -p1 -N < "${patch}"
          done
          cp ../patch/${{ github.event.inputs.set_ufi_patch_version }}/msm8916_defconfig arch/arm64/configs/msm8916_defconfig

      - name: Compile
        id: compile
        run: |
          cd linux/
          export CROSS_COMPILE=aarch64-linux-gnu-
          export ARCH=arm64
          make msm8916_defconfig
          echo -e "$(nproc) thread compile"
          export LOCALVERSION=-msm8916
          make include/config/kernel.release
          make deb-pkg -j$(nproc)
          # fakeroot make-kpkg  --initrd --cross-compile aarch64-linux-gnu- --arch arm64  kernel_image kernel_headers
          # kernel
          cp arch/arm64/boot/Image.gz /workdir
          # dtb
          tar -czf /workdir/linux-dtbs.tar.gz arch/arm64/boot/dts/qcom/*
          # kernel-dtb
          cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/msm8916-handsome-openstick-ufi001c.dtb > /workdir/ufi001c-kernel-dtb
          cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/msm8916-handsome-openstick-ufiw001.dtb > /workdir/ufiw001-kernel-dtb
          # linux-headers linux-image
          cd ..
          cp linux-*.deb /workdir
          echo "::set-output name=status::success"

      - name: Upload image to Release
        uses: ncipollo/release-action@main
        if: steps.compile.outputs.status == 'success' && !cancelled()
        with:
          tag: UFI_Debian_${{ env.COMPILE_STARTINGTIME }}
          artifacts: /workdir/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            This is UFI ${{ env.LINUX_GITURL }}
